// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/cliente/infra/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/modules/cliente/infra/repository/interfaces.go -destination=internal/modules/cliente/infra/repository/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/valdinei-santos/cpf-backend/internal/modules/cliente/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIClienteRepository is a mock of IClienteRepository interface.
type MockIClienteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIClienteRepositoryMockRecorder
	isgomock struct{}
}

// MockIClienteRepositoryMockRecorder is the mock recorder for MockIClienteRepository.
type MockIClienteRepositoryMockRecorder struct {
	mock *MockIClienteRepository
}

// NewMockIClienteRepository creates a new mock instance.
func NewMockIClienteRepository(ctrl *gomock.Controller) *MockIClienteRepository {
	mock := &MockIClienteRepository{ctrl: ctrl}
	mock.recorder = &MockIClienteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClienteRepository) EXPECT() *MockIClienteRepositoryMockRecorder {
	return m.recorder
}

// AddCliente mocks base method.
func (m *MockIClienteRepository) AddCliente(p *entities.Cliente) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCliente", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCliente indicates an expected call of AddCliente.
func (mr *MockIClienteRepositoryMockRecorder) AddCliente(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCliente", reflect.TypeOf((*MockIClienteRepository)(nil).AddCliente), p)
}

// Count mocks base method.
func (m *MockIClienteRepository) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIClienteRepositoryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIClienteRepository)(nil).Count))
}

// DeleteCliente mocks base method.
func (m *MockIClienteRepository) DeleteCliente(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCliente", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCliente indicates an expected call of DeleteCliente.
func (mr *MockIClienteRepositoryMockRecorder) DeleteCliente(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCliente", reflect.TypeOf((*MockIClienteRepository)(nil).DeleteCliente), id)
}

// GetAllClientes mocks base method.
func (m *MockIClienteRepository) GetAllClientes(offset, limit int64) ([]*entities.Cliente, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClientes", offset, limit)
	ret0, _ := ret[0].([]*entities.Cliente)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllClientes indicates an expected call of GetAllClientes.
func (mr *MockIClienteRepositoryMockRecorder) GetAllClientes(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClientes", reflect.TypeOf((*MockIClienteRepository)(nil).GetAllClientes), offset, limit)
}

// GetClienteByID mocks base method.
func (m *MockIClienteRepository) GetClienteByID(id string) (*entities.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClienteByID", id)
	ret0, _ := ret[0].(*entities.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClienteByID indicates an expected call of GetClienteByID.
func (mr *MockIClienteRepositoryMockRecorder) GetClienteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClienteByID", reflect.TypeOf((*MockIClienteRepository)(nil).GetClienteByID), id)
}

// GetManyClienteByIDs mocks base method.
func (m *MockIClienteRepository) GetManyClienteByIDs(ids []string) ([]*entities.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyClienteByIDs", ids)
	ret0, _ := ret[0].([]*entities.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyClienteByIDs indicates an expected call of GetManyClienteByIDs.
func (mr *MockIClienteRepositoryMockRecorder) GetManyClienteByIDs(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyClienteByIDs", reflect.TypeOf((*MockIClienteRepository)(nil).GetManyClienteByIDs), ids)
}

// UpdateCliente mocks base method.
func (m *MockIClienteRepository) UpdateCliente(id string, p *entities.Cliente) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCliente", id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCliente indicates an expected call of UpdateCliente.
func (mr *MockIClienteRepositoryMockRecorder) UpdateCliente(id, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCliente", reflect.TypeOf((*MockIClienteRepository)(nil).UpdateCliente), id, p)
}
